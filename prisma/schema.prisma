// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Account {
  id                 String  @id @default(cuid())
  userId             String  
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) //onDelete: Cascade = “Ebeveyni silersen, bağlı çocuk kayıtları da otomatik silinsin” demektir.
  //onDelete: Cascade ⇒ User silinirse, o kullanıcıya ait tüm Account kayıtları otomatik silinir.
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique 
  userId       String   
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // user silinirse, user a ait session da silinir
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model User{
  id String @id @default(cuid())
  name String?
  email String @unique
  emailVerified DateTime?
  image String?
  accounts Account[]
  sessions Session[]
  jobs Job[] @relation("PostedJobs")
  applications Application[]
}

model Job{
  id String @id @default(cuid())
  title String
  company String
  location String
  type String
  description String @db.Text //uzun metin 
  salary String?

  postedAt DateTime @default(now())
  postedBy User @relation("PostedJobs",fields: [postedById], references: [id])
  postedById String

  applications Application[]
}

model Application{
  id String @id @default(cuid())
  jobId String
  userId String
  status String @default("PENDING")
  appliedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  job Job @relation(fields: [jobId], references: [id])

  @@unique([userId, jobId]) //Aynı kullanıcı aynı ilana ikinci kez başvuramaz. DB düzeyinde engellenir. tekrari engeller
}